{
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_00_conf_sample_cross": {
        "code": "class HighLevel:\n    def peakmem_00_conf_sample_cross(self, out):\n        ptsRZ, dS, ind, reseff = self.ves.get_sampleCross(\n            res=0.02,\n            domain=[None, [-2, 2]],\n            resMode='abs',\n            ind=None,\n            mode='flat',        # imshow bugged?\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_00_conf_sample_cross",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "19d0a033a07b1719d068d50aaab1b60c07d9a091ddd723776c86e96f5e1f5e08"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_01_conf_sample_surface": {
        "code": "class HighLevel:\n    def peakmem_01_conf_sample_surface(self, out):\n        pts, dS, ind, [reseff_cross, reseff_phi] = self.ves.get_sampleS(\n            res=0.02,\n            domain=[None, None, [0, np.pi/2.]],\n            resMode='abs',\n            ind=None,\n            offsetIn=0.,\n            returnas='(X, Y, Z)',\n            Ind=None,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_01_conf_sample_surface",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "a3468a6f718453d64e864ebe6b345b748d877e864cb139fd0ebb7e597d7cf690"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_02_conf_sample_volume": {
        "code": "class HighLevel:\n    def peakmem_02_conf_sample_volume(self, out):\n        pts, dV, ind, [resR, resZ, resPhi] = self.ves.get_sampleV(\n            res=0.05,\n            domain=[None, [0, None], [0, np.pi/4.]],\n            resMode='abs',\n            ind=None,\n            returnas='(X, Y, Z)',\n            algo='new',\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_02_conf_sample_volume",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "5190e5e69048893d9e7d108e406bfd1bc337c145529d86f98c0b941803fc9e40"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_03_camlos1d": {
        "code": "class HighLevel:\n    def peakmem_03_camlos1d(self, out):\n        cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_03_camlos1d",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "d81b2551cabf20dab559d7363c9f2f0b6ce692b9aafb7622b5a0c7a8f02b37ea"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_04_camlos2d": {
        "code": "class HighLevel:\n    def peakmem_04_camlos2d(self, out):\n        cam = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_04_camlos2d",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "1c6195a93e4a0d81b028a271e0923312f49f11114c36f3d04ed8168f1e5956f7"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_05_camlos2d_calcsignal_calls": {
        "code": "class HighLevel:\n    def peakmem_05_camlos2d_calcsignal_calls(self, out):\n        sig, units = self.cam2d.calc_signal(\n            self.emiss,\n            t=out[3],\n            res=0.01,\n            resMode='abs',\n            method='sum',\n            minimize='calls',\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_05_camlos2d_calcsignal_calls",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "4641a1db201302c8f8bc61c8d15fbab284f13e512328466dda5784e01ed4d040"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_06_camlos2d_calcsignal_hybrid": {
        "code": "class HighLevel:\n    def peakmem_06_camlos2d_calcsignal_hybrid(self, out):\n        sig, units = self.cam2d.calc_signal(\n            self.emiss,\n            t=out[3],\n            res=0.01,\n            resMode='abs',\n            method='sum',\n            minimize='hybrid',\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_06_camlos2d_calcsignal_hybrid",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "815f107fc68a5ab5addcd789019e348757807460fd3d1651809f76f71922190c"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_07_camlos2d_calcsignal_mem": {
        "code": "class HighLevel:\n    def peakmem_07_camlos2d_calcsignal_mem(self, out):\n        sig, units = self.cam2d.calc_signal(\n            self.emiss,\n            t=out[3],\n            res=0.01,\n            resMode='abs',\n            method='sum',\n            minimize='memory',\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_07_camlos2d_calcsignal_mem",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "a381a8c4fe58d4d865f944c5dd13c4b4c8d99bb92f4a1e9e087b8cf3ea5603fe"
    },
    "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_08_solidangle_part": {
        "code": "class HighLevel:\n    def peakmem_08_solidangle_part(self, out):\n        (\n            ptsRZ, sang, indices, reseff,\n        ) = self.conf.calc_solidangle_particle_integrated(**out[2])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "name": "benchmarks_00_Geometry_peakmem.HighLevel.peakmem_08_solidangle_part",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_peakmem.py:39",
        "timeout": 60,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "3d14b662b3ba167b5d5446e9ecca085c8ce2373d27906341449961c53c81b247"
    },
    "benchmarks_00_Geometry_time.HighLevel.time_00_conf_sample_cross": {
        "code": "class HighLevel:\n    def time_00_conf_sample_cross(self, out):\n        ptsRZ, dS, ind, reseff = self.ves.get_sampleCross(\n            res=0.02,\n            domain=[None, [-2, 2]],\n            resMode='abs',\n            ind=None,\n            mode='flat',        # imshow bugged?\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_00_conf_sample_cross",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "fcbeca34a09b4db4689dd1592dba9ce7e7c00f5dcb398426798c70ea70e3df29",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_01_conf_sample_surface": {
        "code": "class HighLevel:\n    def time_01_conf_sample_surface(self, out):\n        pts, dS, ind, [reseff_cross, reseff_phi] = self.ves.get_sampleS(\n            res=0.02,\n            domain=[None, None, [0, np.pi/2.]],\n            resMode='abs',\n            ind=None,\n            offsetIn=0.,\n            returnas='(X, Y, Z)',\n            Ind=None,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_01_conf_sample_surface",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "9f07e76155f435e33ca98bdc7c55c611f226b090ad1247658bb70b18b10da3b5",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_02_conf_sample_volume": {
        "code": "class HighLevel:\n    def time_02_conf_sample_volume(self, out):\n        pts, dV, ind, [resR, resZ, resPhi] = self.ves.get_sampleV(\n            res=0.05,\n            domain=[None, [0, None], [0, np.pi/4.]],\n            resMode='abs',\n            ind=None,\n            returnas='(X, Y, Z)',\n            algo='new',\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_02_conf_sample_volume",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "01205bed1618bebc399dae499c91f3c45a22987e5ac8490c736e8262cc0ece40",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_03_camlos1d": {
        "code": "class HighLevel:\n    def time_03_camlos1d(self, out):\n        cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_03_camlos1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "5e1ded1e26878ff2cddaa26b03aa775fda8491d3a2b4cef63499258b2c3d4e01",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_04_camlos2d": {
        "code": "class HighLevel:\n    def time_04_camlos2d(self, out):\n        cam = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_04_camlos2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "14b2a489434d65cc393e3f95f281b5150ed73cf371722fbad5d216950d4f1861",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_05_camlos2d_calcsignal_calls": {
        "code": "class HighLevel:\n    def time_05_camlos2d_calcsignal_calls(self, out):\n        sig, units = self.cam2d.calc_signal(\n            self.emiss,\n            t=out[3],\n            res=0.01,\n            resMode='abs',\n            method='sum',\n            minimize='calls',\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_05_camlos2d_calcsignal_calls",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "92fba366cef0fc04cdacc0fce34308f89554145f7b5e735f715bece102fc0129",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_06_camlos2d_calcsignal_hybrid": {
        "code": "class HighLevel:\n    def time_06_camlos2d_calcsignal_hybrid(self, out):\n        sig, units = self.cam2d.calc_signal(\n            self.emiss,\n            t=out[3],\n            res=0.01,\n            resMode='abs',\n            method='sum',\n            minimize='hybrid',\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_06_camlos2d_calcsignal_hybrid",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "7bc91e68995954f28b70df4239c1903bc116aa340ca65c038733793b9d2b1a34",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_07_camlos2d_calcsignal_mem": {
        "code": "class HighLevel:\n    def time_07_camlos2d_calcsignal_mem(self, out):\n        sig, units = self.cam2d.calc_signal(\n            self.emiss,\n            t=out[3],\n            res=0.01,\n            resMode='abs',\n            method='sum',\n            minimize='memory',\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_07_camlos2d_calcsignal_mem",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "b8c23f4250984caa9a1215608571104e7e12cc6c49a340c97b02b4e15d0d4ed2",
        "warmup_time": -1
    },
    "benchmarks_00_Geometry_time.HighLevel.time_08_solidangle_part": {
        "code": "class HighLevel:\n    def time_08_solidangle_part(self, out):\n        (\n            ptsRZ, sang, indices, reseff,\n        ) = self.conf.calc_solidangle_particle_integrated(**out[2])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.ves = self.conf.Ves.InnerV0\n    \n        def emiss(pts, t=None):\n            R = np.hypot(pts[0, :], pts[1, :])\n            Z = pts[2, :]\n            ee = np.exp(-(R-6)**2/1**2 - Z**2/2**2)\n            if np.isscalar(t):\n                ee = ee + 0.1*np.cos(t)*ee\n            elif isinstance(t, np.ndarray):\n                ee = ee[None, :] + 0.1*np.cos(t)[:, None]*ee\n            return ee\n    \n        self.cam2d = tf.geom.utils.create_CamLOS2D(config=self.conf, **out[1])\n        self.emiss = emiss\n\n    def setup_cache(self):\n        \"\"\" setup_cache caches setup data and is un only once for all\n    \n        It should either return data or save a file\n        Data returned is fed to setup(), teardown() and all benchmarks\n    \n        \"\"\"\n    \n        # prepare input dict for a cam1d\n        dcam1d = {\n            'pinhole': [8.38/np.sqrt(2.), 8.38/np.sqrt(2.), 0.],\n            'orientation': [-np.pi, 0., 0],\n            'focal': 0.08,\n            'sensor_nb': 100,\n            'sensor_size': 0.3,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam1',\n        }\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 300,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for particle solid angle toroidal integration\n        dpart = {\n            'part_traj': np.array([\n                [6., 0., 0.], [6., 0.01, -4],\n            ]).T,\n            'part_radius': np.array([10e-6, 10e-6]),\n            'resolution': 0.3,\n            'DPhi': [-np.pi/2, np.pi/2],\n            'vmax': False,\n            'approx': False,\n            'plot': False,\n        }\n    \n        # time for signal\n        t = np.linspace(0, 10, 11)\n    \n        return dcam1d, dcam2d, dpart, t",
        "min_run_count": 2,
        "name": "benchmarks_00_Geometry_time.HighLevel.time_08_solidangle_part",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_00_Geometry_time.py:39",
        "timeout": 60,
        "type": "time",
        "unit": "seconds",
        "version": "6d7f3abf9384a9acc98a23ffb1b1ba8763babfba065bb5118f4cd32546c1bd29",
        "warmup_time": -1
    },
    "benchmarks_01_Mesh2D_peakmem.HighLevel.peakmem_00_mesh2d_rect_bs2": {
        "code": "class HighLevel:\n    def peakmem_00_mesh2d_rect_bs2(self, out):\n        mesh = tf.data.Mesh2D()\n        mesh.add_mesh(crop_poly=self.conf, **out[1])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(crop_poly=self.conf, **out[1])\n        self.mesh2d.add_mesh(**out[2])\n        self.cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup_cache(self):\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 200,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for mesh2d rect\n        dmesh2drect = {\n            'res': 0.10,\n            'deg': 2,\n            'key': 'rect1',\n        }\n    \n        # prepare input dict for mesh2d tri\n        out = np.loadtxt(_PFE_TESTDATA)\n        dmesh2dtri = {\n            'knots': out[1:int(out[0, 0])+1, :2],\n            'cents': out[int(out[0, 0])+1:, :].astype(int),\n            'deg': 1,\n            'key': 'tri1',\n        }\n    \n        return dcam2d, dmesh2drect, dmesh2dtri",
        "name": "benchmarks_01_Mesh2D_peakmem.HighLevel.peakmem_00_mesh2d_rect_bs2",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_01_Mesh2D_peakmem.py:52",
        "timeout": 30,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "559950ed4e3b4d508ce4f9f06e8bdafc6eecc608fb97175a665fbffcba925873"
    },
    "benchmarks_01_Mesh2D_peakmem.HighLevel.peakmem_01_mesh2dtri_bs1": {
        "code": "class HighLevel:\n    def peakmem_01_mesh2dtri_bs1(self, out):\n        mesh = tf.data.Mesh2D()\n        mesh.add_mesh(**out[2])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(crop_poly=self.conf, **out[1])\n        self.mesh2d.add_mesh(**out[2])\n        self.cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup_cache(self):\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 200,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for mesh2d rect\n        dmesh2drect = {\n            'res': 0.10,\n            'deg': 2,\n            'key': 'rect1',\n        }\n    \n        # prepare input dict for mesh2d tri\n        out = np.loadtxt(_PFE_TESTDATA)\n        dmesh2dtri = {\n            'knots': out[1:int(out[0, 0])+1, :2],\n            'cents': out[int(out[0, 0])+1:, :].astype(int),\n            'deg': 1,\n            'key': 'tri1',\n        }\n    \n        return dcam2d, dmesh2drect, dmesh2dtri",
        "name": "benchmarks_01_Mesh2D_peakmem.HighLevel.peakmem_01_mesh2dtri_bs1",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_01_Mesh2D_peakmem.py:52",
        "timeout": 30,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "4c6f3caa2c334fec9b5287eecd619cd442096802e9a3e8b0d03631c5be796385"
    },
    "benchmarks_01_Mesh2D_peakmem.HighLevel.peakmem_02_geommatrix_rect": {
        "code": "class HighLevel:\n    def peakmem_02_geommatrix_rect(self, out):\n        self.mesh2d.add_geometry_matrix(\n            key='rect1-bs2', cam=self.cam, res=0.01, verb=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(crop_poly=self.conf, **out[1])\n        self.mesh2d.add_mesh(**out[2])\n        self.cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup_cache(self):\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 200,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for mesh2d rect\n        dmesh2drect = {\n            'res': 0.10,\n            'deg': 2,\n            'key': 'rect1',\n        }\n    \n        # prepare input dict for mesh2d tri\n        out = np.loadtxt(_PFE_TESTDATA)\n        dmesh2dtri = {\n            'knots': out[1:int(out[0, 0])+1, :2],\n            'cents': out[int(out[0, 0])+1:, :].astype(int),\n            'deg': 1,\n            'key': 'tri1',\n        }\n    \n        return dcam2d, dmesh2drect, dmesh2dtri",
        "name": "benchmarks_01_Mesh2D_peakmem.HighLevel.peakmem_02_geommatrix_rect",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_01_Mesh2D_peakmem.py:52",
        "timeout": 30,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "541f922b31946e4e2c8abfd93ae903e54528dbc851e59bb3cffe2eda57721fca"
    },
    "benchmarks_01_Mesh2D_time.HighLevel.time_00_mesh2d_rect_bs2": {
        "code": "class HighLevel:\n    def time_00_mesh2d_rect_bs2(self, out):\n        mesh = tf.data.Mesh2D()\n        mesh.add_mesh(crop_poly=self.conf, **out[1])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(crop_poly=self.conf, **out[1])\n        self.mesh2d.add_mesh(**out[2])\n        self.cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup_cache(self):\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 200,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for mesh2d rect\n        dmesh2drect = {\n            'res': 0.10,\n            'deg': 2,\n            'key': 'rect1',\n        }\n    \n        # prepare input dict for mesh2d tri\n        out = np.loadtxt(_PFE_TESTDATA)\n        dmesh2dtri = {\n            'knots': out[1:int(out[0, 0])+1, :2],\n            'cents': out[int(out[0, 0])+1:, :].astype(int),\n            'deg': 1,\n            'key': 'tri1',\n        }\n    \n        return dcam2d, dmesh2drect, dmesh2dtri",
        "min_run_count": 2,
        "name": "benchmarks_01_Mesh2D_time.HighLevel.time_00_mesh2d_rect_bs2",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_01_Mesh2D_time.py:52",
        "timeout": 30,
        "type": "time",
        "unit": "seconds",
        "version": "5a5e49cd4082faa3152b26a8040c1ce2b3d677ebbfc92f76f48e66c4e8493968",
        "warmup_time": -1
    },
    "benchmarks_01_Mesh2D_time.HighLevel.time_01_mesh2dtri_bs1": {
        "code": "class HighLevel:\n    def time_01_mesh2dtri_bs1(self, out):\n        mesh = tf.data.Mesh2D()\n        mesh.add_mesh(**out[2])\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(crop_poly=self.conf, **out[1])\n        self.mesh2d.add_mesh(**out[2])\n        self.cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup_cache(self):\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 200,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for mesh2d rect\n        dmesh2drect = {\n            'res': 0.10,\n            'deg': 2,\n            'key': 'rect1',\n        }\n    \n        # prepare input dict for mesh2d tri\n        out = np.loadtxt(_PFE_TESTDATA)\n        dmesh2dtri = {\n            'knots': out[1:int(out[0, 0])+1, :2],\n            'cents': out[int(out[0, 0])+1:, :].astype(int),\n            'deg': 1,\n            'key': 'tri1',\n        }\n    \n        return dcam2d, dmesh2drect, dmesh2dtri",
        "min_run_count": 2,
        "name": "benchmarks_01_Mesh2D_time.HighLevel.time_01_mesh2dtri_bs1",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_01_Mesh2D_time.py:52",
        "timeout": 30,
        "type": "time",
        "unit": "seconds",
        "version": "1652216152a6128ff0dbe7d382cf6bb6bbd41600bf1b114c58f54bcd009c93fb",
        "warmup_time": -1
    },
    "benchmarks_01_Mesh2D_time.HighLevel.time_02_geommatrix_rect": {
        "code": "class HighLevel:\n    def time_02_geommatrix_rect(self, out):\n        self.mesh2d.add_geometry_matrix(\n            key='rect1-bs2', cam=self.cam, res=0.01, verb=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        self.conf = tf.load_config('ITER')\n        self.mesh2d = tf.data.Mesh2D()\n        self.mesh2d.add_mesh(crop_poly=self.conf, **out[1])\n        self.mesh2d.add_mesh(**out[2])\n        self.cam = tf.geom.utils.create_CamLOS1D(config=self.conf, **out[0])\n\n    def setup_cache(self):\n    \n        # prepare input dict for a cam2d\n        dcam2d = {\n            'pinhole': [8.38, 0., 0.],\n            'orientation': [-7*np.pi/8, np.pi/6, 0],\n            'focal': 0.08,\n            'sensor_nb': 200,\n            'sensor_size': 0.2,\n            'Diag': 'SXR',\n            'Exp': 'WEST',\n            'Name': 'cam2',\n        }\n    \n        # prepare input dict for mesh2d rect\n        dmesh2drect = {\n            'res': 0.10,\n            'deg': 2,\n            'key': 'rect1',\n        }\n    \n        # prepare input dict for mesh2d tri\n        out = np.loadtxt(_PFE_TESTDATA)\n        dmesh2dtri = {\n            'knots': out[1:int(out[0, 0])+1, :2],\n            'cents': out[int(out[0, 0])+1:, :].astype(int),\n            'deg': 1,\n            'key': 'tri1',\n        }\n    \n        return dcam2d, dmesh2drect, dmesh2dtri",
        "min_run_count": 2,
        "name": "benchmarks_01_Mesh2D_time.HighLevel.time_02_geommatrix_rect",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_01_Mesh2D_time.py:52",
        "timeout": 30,
        "type": "time",
        "unit": "seconds",
        "version": "3aafd7887a0122ce5810873d03554d3054cbf9c4f15691ed1925661307c0ae76",
        "warmup_time": -1
    },
    "benchmarks_02_spectralfit_peakmem.HighLevel.peakmem_00_fit1d": {
        "code": "class HighLevel:\n    def peakmem_00_fit1d(self, out):\n    \n        # Define constraint dict\n        dconst = {\n            'amp': {'a1': ['a', 'd']},\n            'width': 'group',\n            'shift': {\n                'a': {'key': 's1', 'coef': 1., 'offset': 0.},\n                'b': {'key': 's1', 'coef': 1., 'offset': 0.},\n                'c': {'key': 's2', 'coef': 2., 'offset': 0.},\n                'd': {'key': 's3', 'coef': 1., 'offset': 0.001e-10},\n            },\n            'double': True,\n            'symmetry': False,\n        }\n    \n        dx0 = {\n            'width': 1.,\n            'shift': {\n                's1': 0.,\n                's2': 1.,\n            },\n            'dratio': 0,\n            'dshift': 0,\n        }\n    \n        domain = {\n            'lamb': [\n                [3.94e-10, 3.952e-10],\n                (3.95e-10, 3.956e-10),\n                [3.96e-10, 4e-10],\n            ],\n        }\n    \n        data = self.spect2d[:5, :]\n        pos = True\n        focus = 'a'\n        dconstants = {'shift': {'s1': 0}}\n    \n        dinput = tf.spectro.fit1d_dinput(\n            dlines=self.dlines,\n            dconstraints=dconst,\n            dconstants=dconstants,\n            dprepare=None,\n            data=data,\n            lamb=self.lamb,\n            mask=None,\n            domain=domain,\n            pos=pos,\n            subset=None,\n            same_spectrum=None,\n            nspect=None,\n            same_spectrum_dlamb=None,\n            focus=focus,\n            valid_fraction=0.28,     # fraction of pixels ok per time step\n            valid_nsigma=0,         # S/N ratio for each pixel\n            focus_half_width=None,\n            valid_return_fract=None,\n            dscales=None,\n            dx0=dx0,\n            dbounds=None,\n            # defconst=None,\n        )\n    \n        dfit1d = tf.spectro.fit1d(\n            dinput=dinput,\n            method=None,\n            Ti=None,\n            chain=True,\n            jac='dense',\n            verbose=False,\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        out = dict(np.load(_PFE_TESTDATA, allow_pickle=True))\n        self.lamb = out['lamb']\n        self.var = out['var']\n        self.dlines = out['dlines'].tolist()\n        self.spect2d = out['spect2d']\n\n    def setup_cache(self):\n        return 0",
        "name": "benchmarks_02_spectralfit_peakmem.HighLevel.peakmem_00_fit1d",
        "param_names": [],
        "params": [],
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_02_spectralfit_peakmem.py:52",
        "timeout": 30,
        "type": "peakmemory",
        "unit": "bytes",
        "version": "d5cb852a9bbe57737ae486aeefabc8fc3aca8c93f3d1c959ffdd32c39aeb772d"
    },
    "benchmarks_02_spectralfit_time.HighLevel.time_00_fit1d": {
        "code": "class HighLevel:\n    def time_00_fit1d(self, out):\n    \n        # Define constraint dict\n        dconst = {\n            'amp': {'a1': ['a', 'd']},\n            'width': 'group',\n            'shift': {\n                'a': {'key': 's1', 'coef': 1., 'offset': 0.},\n                'b': {'key': 's1', 'coef': 1., 'offset': 0.},\n                'c': {'key': 's2', 'coef': 2., 'offset': 0.},\n                'd': {'key': 's3', 'coef': 1., 'offset': 0.001e-10},\n            },\n            'double': True,\n            'symmetry': False,\n        }\n    \n        dx0 = {\n            'width': 1.,\n            'shift': {\n                's1': 0.,\n                's2': 1.,\n            },\n            'dratio': 0,\n            'dshift': 0,\n        }\n    \n        domain = {\n            'lamb': [\n                [3.94e-10, 3.952e-10],\n                (3.95e-10, 3.956e-10),\n                [3.96e-10, 4e-10],\n            ],\n        }\n    \n        data = self.spect2d[:5, :]\n        pos = True\n        focus = 'a'\n        dconstants = {'shift': {'s1': 0}}\n    \n        dinput = tf.spectro.fit1d_dinput(\n            dlines=self.dlines,\n            dconstraints=dconst,\n            dconstants=dconstants,\n            dprepare=None,\n            data=data,\n            lamb=self.lamb,\n            mask=None,\n            domain=domain,\n            pos=pos,\n            subset=None,\n            same_spectrum=None,\n            nspect=None,\n            same_spectrum_dlamb=None,\n            focus=focus,\n            valid_fraction=0.28,     # fraction of pixels ok per time step\n            valid_nsigma=0,         # S/N ratio for each pixel\n            focus_half_width=None,\n            valid_return_fract=None,\n            dscales=None,\n            dx0=dx0,\n            dbounds=None,\n            # defconst=None,\n        )\n    \n        dfit1d = tf.spectro.fit1d(\n            dinput=dinput,\n            method=None,\n            Ti=None,\n            chain=True,\n            jac='dense',\n            verbose=False,\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        out = dict(np.load(_PFE_TESTDATA, allow_pickle=True))\n        self.lamb = out['lamb']\n        self.var = out['var']\n        self.dlines = out['dlines'].tolist()\n        self.spect2d = out['spect2d']\n    \n        self.conf0 = tf.load_config('WEST-V0')\n        self.cryst = tf.load(_PFE_CRYST)\n        self.det = dict(np.load(_PFE_DET, allow_pickle=True))\n        self.xixj_lim = [\n            [-0.041882, 0.041882], 0.1 + 100*172.e-6*np.r_[-0.5, 0.5]\n        ]\n\n    def setup_cache(self):\n        return 0",
        "min_run_count": 2,
        "name": "benchmarks_02_spectralfit_time.HighLevel.time_00_fit1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_02_spectralfit_time.py:65",
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "4f0f9382488889a89efdd948a98125f4dfa1f39ee36b9f37591c6b1429ffbd8c",
        "warmup_time": -1
    },
    "benchmarks_02_spectralfit_time.HighLevel.time_02_get_plasmadomain_at_lamb": {
        "code": "class HighLevel:\n    def time_02_get_plasmadomain_at_lamb(self, out):\n        pts, lambok = self.cryst.get_plasmadomain_at_lamb(\n            det=self.det,\n            lamb=[3.94e-10, 4.e-10],\n            res=[0.004, 0.004, 0.01],\n            config=self.conf0,\n            domain=[None, [-0.36, -0.22], [-4*np.pi/5., -np.pi/2.]],\n            xixj_lim=self.xixj_lim,\n            plot=False,\n        )\n\n    def setup(self, out):\n        \"\"\" run before each benchmark method, out from setup_cache  \"\"\"\n        out = dict(np.load(_PFE_TESTDATA, allow_pickle=True))\n        self.lamb = out['lamb']\n        self.var = out['var']\n        self.dlines = out['dlines'].tolist()\n        self.spect2d = out['spect2d']\n    \n        self.conf0 = tf.load_config('WEST-V0')\n        self.cryst = tf.load(_PFE_CRYST)\n        self.det = dict(np.load(_PFE_DET, allow_pickle=True))\n        self.xixj_lim = [\n            [-0.041882, 0.041882], 0.1 + 100*172.e-6*np.r_[-0.5, 0.5]\n        ]\n\n    def setup_cache(self):\n        return 0",
        "min_run_count": 2,
        "name": "benchmarks_02_spectralfit_time.HighLevel.time_02_get_plasmadomain_at_lamb",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "sample_time": 0.1,
        "setup_cache_key": "/Home/DV226270/ToFu_All/tofu_git/tofu/tofu/benchmarks/benchmarks_02_spectralfit_time.py:65",
        "timeout": 120,
        "type": "time",
        "unit": "seconds",
        "version": "29484a3619ff961aa7f08d2dcf81ab41b3e4c343e7f9c17bc7f7478b0b874a0b",
        "warmup_time": -1
    },
    "version": 2
}